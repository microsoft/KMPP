/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License
 */

/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __KMPPGDBUSGENERATED_H__
#define __KMPPGDBUSGENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.microsoft.kmpp */

#define GDBUS_TYPE_KMPP (gdbus_kmpp_get_type ())
#define GDBUS_KMPP(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPP, GdbusKmpp))
#define GDBUS_IS_KMPP(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPP))
#define GDBUS_KMPP_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDBUS_TYPE_KMPP, GdbusKmppIface))

struct _GdbusKmpp;
typedef struct _GdbusKmpp GdbusKmpp;
typedef struct _GdbusKmppIface GdbusKmppIface;

struct _GdbusKmppIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_client_message) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    guint arg_command,
    GVariant *arg_inBuffer);

  gboolean (*handle_create_self_sign_pfx) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    const gchar *arg_confStr);

  gboolean (*handle_ecdsa_sign) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    guint64 arg_keyId,
    gint arg_type,
    GVariant *arg_digestBytes,
    guint arg_siglen);

  gboolean (*handle_get_version) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_import_pfx) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_inPfxBytes,
    const gchar *arg_inPassword);

  gboolean (*handle_pfx_close) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    guint64 arg_keyId);

  gboolean (*handle_pfx_open) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt);

  gboolean (*handle_replace_pfx_certs) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt,
    GVariant *arg_pemCert);

  gboolean (*handle_rsa_private_encrypt_decrypt) (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_decrypt,
    guint64 arg_keyId,
    GVariant *arg_fromBytes,
    gint arg_padding,
    gint arg_tlen);

};

GType gdbus_kmpp_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdbus_kmpp_interface_info (void);
guint gdbus_kmpp_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdbus_kmpp_complete_import_pfx (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *outVerifyChainErrorSaltPfxBytes);

void gdbus_kmpp_complete_pfx_open (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    guint64 keyId);

void gdbus_kmpp_complete_pfx_close (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation);

void gdbus_kmpp_complete_rsa_private_encrypt_decrypt (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *toBytes);

void gdbus_kmpp_complete_ecdsa_sign (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *signatureBytes);

void gdbus_kmpp_complete_create_self_sign_pfx (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *outSaltPfxBytes);

void gdbus_kmpp_complete_replace_pfx_certs (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *outSaltPfxBytes);

void gdbus_kmpp_complete_client_message (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    GVariant *outBuffer);

void gdbus_kmpp_complete_get_version (
    GdbusKmpp *object,
    GDBusMethodInvocation *invocation,
    gint ret);



/* D-Bus method calls: */
void gdbus_kmpp_call_import_pfx (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_inPfxBytes,
    const gchar *arg_inPassword,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_import_pfx_finish (
    GdbusKmpp *proxy,
    GVariant **out_outVerifyChainErrorSaltPfxBytes,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_import_pfx_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_inPfxBytes,
    const gchar *arg_inPassword,
    GVariant **out_outVerifyChainErrorSaltPfxBytes,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_pfx_open (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_pfx_open_finish (
    GdbusKmpp *proxy,
    guint64 *out_keyId,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_pfx_open_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt,
    guint64 *out_keyId,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_pfx_close (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    guint64 arg_keyId,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_pfx_close_finish (
    GdbusKmpp *proxy,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_pfx_close_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    guint64 arg_keyId,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_rsa_private_encrypt_decrypt (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_decrypt,
    guint64 arg_keyId,
    GVariant *arg_fromBytes,
    gint arg_padding,
    gint arg_tlen,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_rsa_private_encrypt_decrypt_finish (
    GdbusKmpp *proxy,
    GVariant **out_toBytes,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_rsa_private_encrypt_decrypt_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_decrypt,
    guint64 arg_keyId,
    GVariant *arg_fromBytes,
    gint arg_padding,
    gint arg_tlen,
    GVariant **out_toBytes,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_ecdsa_sign (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    guint64 arg_keyId,
    gint arg_type,
    GVariant *arg_digestBytes,
    guint arg_siglen,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_ecdsa_sign_finish (
    GdbusKmpp *proxy,
    GVariant **out_signatureBytes,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_ecdsa_sign_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    guint64 arg_keyId,
    gint arg_type,
    GVariant *arg_digestBytes,
    guint arg_siglen,
    GVariant **out_signatureBytes,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_create_self_sign_pfx (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    const gchar *arg_confStr,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_create_self_sign_pfx_finish (
    GdbusKmpp *proxy,
    GVariant **out_outSaltPfxBytes,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_create_self_sign_pfx_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    const gchar *arg_confStr,
    GVariant **out_outSaltPfxBytes,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_replace_pfx_certs (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt,
    GVariant *arg_pemCert,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_replace_pfx_certs_finish (
    GdbusKmpp *proxy,
    GVariant **out_outSaltPfxBytes,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_replace_pfx_certs_sync (
    GdbusKmpp *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_kmppFlags,
    GVariant *arg_pfxBytes,
    const gchar *arg_salt,
    GVariant *arg_pemCert,
    GVariant **out_outSaltPfxBytes,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_client_message (
    GdbusKmpp *proxy,
    guint arg_command,
    GVariant *arg_inBuffer,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_client_message_finish (
    GdbusKmpp *proxy,
    GVariant **out_outBuffer,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_client_message_sync (
    GdbusKmpp *proxy,
    guint arg_command,
    GVariant *arg_inBuffer,
    GVariant **out_outBuffer,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmpp_call_get_version (
    GdbusKmpp *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmpp_call_get_version_finish (
    GdbusKmpp *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmpp_call_get_version_sync (
    GdbusKmpp *proxy,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDBUS_TYPE_KMPP_PROXY (gdbus_kmpp_proxy_get_type ())
#define GDBUS_KMPP_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPP_PROXY, GdbusKmppProxy))
#define GDBUS_KMPP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_KMPP_PROXY, GdbusKmppProxyClass))
#define GDBUS_KMPP_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_KMPP_PROXY, GdbusKmppProxyClass))
#define GDBUS_IS_KMPP_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPP_PROXY))
#define GDBUS_IS_KMPP_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_KMPP_PROXY))

typedef struct _GdbusKmppProxy GdbusKmppProxy;
typedef struct _GdbusKmppProxyClass GdbusKmppProxyClass;
typedef struct _GdbusKmppProxyPrivate GdbusKmppProxyPrivate;

struct _GdbusKmppProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdbusKmppProxyPrivate *priv;
};

struct _GdbusKmppProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdbus_kmpp_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusKmppProxy, g_object_unref)
#endif

void gdbus_kmpp_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusKmpp *gdbus_kmpp_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusKmpp *gdbus_kmpp_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdbus_kmpp_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusKmpp *gdbus_kmpp_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusKmpp *gdbus_kmpp_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDBUS_TYPE_KMPP_SKELETON (gdbus_kmpp_skeleton_get_type ())
#define GDBUS_KMPP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPP_SKELETON, GdbusKmppSkeleton))
#define GDBUS_KMPP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_KMPP_SKELETON, GdbusKmppSkeletonClass))
#define GDBUS_KMPP_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_KMPP_SKELETON, GdbusKmppSkeletonClass))
#define GDBUS_IS_KMPP_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPP_SKELETON))
#define GDBUS_IS_KMPP_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_KMPP_SKELETON))

typedef struct _GdbusKmppSkeleton GdbusKmppSkeleton;
typedef struct _GdbusKmppSkeletonClass GdbusKmppSkeletonClass;
typedef struct _GdbusKmppSkeletonPrivate GdbusKmppSkeletonPrivate;

struct _GdbusKmppSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdbusKmppSkeletonPrivate *priv;
};

struct _GdbusKmppSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdbus_kmpp_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusKmppSkeleton, g_object_unref)
#endif

GdbusKmpp *gdbus_kmpp_skeleton_new (void);


G_END_DECLS

#endif /* __KMPPGDBUSGENERATED_H__ */
