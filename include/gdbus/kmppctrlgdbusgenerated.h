/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License
 */

/*
 * Generated by gdbus-codegen 2.56.1. DO NOT EDIT.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from.
 */

#ifndef __KMPPCTRLGDBUSGENERATED_H__
#define __KMPPCTRLGDBUSGENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.microsoft.kmppctrl */

#define GDBUS_TYPE_KMPPCTRL (gdbus_kmppctrl_get_type ())
#define GDBUS_KMPPCTRL(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPPCTRL, GdbusKMPPctrl))
#define GDBUS_IS_KMPPCTRL(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPPCTRL))
#define GDBUS_KMPPCTRL_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GDBUS_TYPE_KMPPCTRL, GdbusKMPPctrlIface))

struct _GdbusKMPPctrl;
typedef struct _GdbusKMPPctrl GdbusKMPPctrl;
typedef struct _GdbusKMPPctrlIface GdbusKMPPctrlIface;

struct _GdbusKMPPctrlIface
{
  GTypeInterface parent_iface;

  gboolean (*handle_cert_ctrl) (
    GdbusKMPPctrl *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_ctrl,
    gint arg_location,
    gint arg_format,
    guint arg_length,
    const gchar *arg_sharedMemName);

  gboolean (*handle_get_ctrl_version) (
    GdbusKMPPctrl *object,
    GDBusMethodInvocation *invocation);

};

GType gdbus_kmppctrl_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *gdbus_kmppctrl_interface_info (void);
guint gdbus_kmppctrl_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void gdbus_kmppctrl_complete_cert_ctrl (
    GdbusKMPPctrl *object,
    GDBusMethodInvocation *invocation,
    gint ret);

void gdbus_kmppctrl_complete_get_ctrl_version (
    GdbusKMPPctrl *object,
    GDBusMethodInvocation *invocation,
    gint ret);



/* D-Bus method calls: */
void gdbus_kmppctrl_call_cert_ctrl (
    GdbusKMPPctrl *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_ctrl,
    gint arg_location,
    gint arg_format,
    guint arg_length,
    const gchar *arg_sharedMemName,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmppctrl_call_cert_ctrl_finish (
    GdbusKMPPctrl *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmppctrl_call_cert_ctrl_sync (
    GdbusKMPPctrl *proxy,
    GVariant *arg_correlationId,
    gint arg_version,
    gint arg_ctrl,
    gint arg_location,
    gint arg_format,
    guint arg_length,
    const gchar *arg_sharedMemName,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);

void gdbus_kmppctrl_call_get_ctrl_version (
    GdbusKMPPctrl *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean gdbus_kmppctrl_call_get_ctrl_version_finish (
    GdbusKMPPctrl *proxy,
    gint *out_ret,
    GAsyncResult *res,
    GError **error);

gboolean gdbus_kmppctrl_call_get_ctrl_version_sync (
    GdbusKMPPctrl *proxy,
    gint *out_ret,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GDBUS_TYPE_KMPPCTRL_PROXY (gdbus_kmppctrl_proxy_get_type ())
#define GDBUS_KMPPCTRL_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPPCTRL_PROXY, GdbusKMPPctrlProxy))
#define GDBUS_KMPPCTRL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_KMPPCTRL_PROXY, GdbusKMPPctrlProxyClass))
#define GDBUS_KMPPCTRL_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_KMPPCTRL_PROXY, GdbusKMPPctrlProxyClass))
#define GDBUS_IS_KMPPCTRL_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPPCTRL_PROXY))
#define GDBUS_IS_KMPPCTRL_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_KMPPCTRL_PROXY))

typedef struct _GdbusKMPPctrlProxy GdbusKMPPctrlProxy;
typedef struct _GdbusKMPPctrlProxyClass GdbusKMPPctrlProxyClass;
typedef struct _GdbusKMPPctrlProxyPrivate GdbusKMPPctrlProxyPrivate;

struct _GdbusKMPPctrlProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GdbusKMPPctrlProxyPrivate *priv;
};

struct _GdbusKMPPctrlProxyClass
{
  GDBusProxyClass parent_class;
};

GType gdbus_kmppctrl_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusKMPPctrlProxy, g_object_unref)
#endif

void gdbus_kmppctrl_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusKMPPctrl *gdbus_kmppctrl_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusKMPPctrl *gdbus_kmppctrl_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void gdbus_kmppctrl_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GdbusKMPPctrl *gdbus_kmppctrl_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GdbusKMPPctrl *gdbus_kmppctrl_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GDBUS_TYPE_KMPPCTRL_SKELETON (gdbus_kmppctrl_skeleton_get_type ())
#define GDBUS_KMPPCTRL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GDBUS_TYPE_KMPPCTRL_SKELETON, GdbusKMPPctrlSkeleton))
#define GDBUS_KMPPCTRL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GDBUS_TYPE_KMPPCTRL_SKELETON, GdbusKMPPctrlSkeletonClass))
#define GDBUS_KMPPCTRL_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GDBUS_TYPE_KMPPCTRL_SKELETON, GdbusKMPPctrlSkeletonClass))
#define GDBUS_IS_KMPPCTRL_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GDBUS_TYPE_KMPPCTRL_SKELETON))
#define GDBUS_IS_KMPPCTRL_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GDBUS_TYPE_KMPPCTRL_SKELETON))

typedef struct _GdbusKMPPctrlSkeleton GdbusKMPPctrlSkeleton;
typedef struct _GdbusKMPPctrlSkeletonClass GdbusKMPPctrlSkeletonClass;
typedef struct _GdbusKMPPctrlSkeletonPrivate GdbusKMPPctrlSkeletonPrivate;

struct _GdbusKMPPctrlSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GdbusKMPPctrlSkeletonPrivate *priv;
};

struct _GdbusKMPPctrlSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType gdbus_kmppctrl_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GdbusKMPPctrlSkeleton, g_object_unref)
#endif

GdbusKMPPctrl *gdbus_kmppctrl_skeleton_new (void);


G_END_DECLS

#endif /* __KMPPCTRLGDBUSGENERATED_H__ */
