name: "CodeQL"

on:
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Run once a week at midnight on Sunday

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp', 'csharp', 'c']  # Match languages with main branch

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for accurate analysis

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    - name: Install dependencies
      if: ${{ matrix.language == 'cpp' }}
      run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config cmake libcurl4-openssl-dev libglib2.0-dev libgtest-dev libdbus-1-dev uuid-dev libssl-dev build-essential googletest libtss2-dev libjansson-dev
          curl -sSL -O https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb 
          sudo rm packages-microsoft-prod.deb 
          sudo apt-get update 
          echo "deb https://packages.microsoft.com/ubuntu/20.04/prod testing main" | sudo tee /etc/apt/sources.list.d/microsoft-test.list 
          sudo apt-get update 
          sudo apt install -y symcrypt 

    # Setup .NET for C# analysis
    - name: Setup .NET
      if: ${{ matrix.language == 'csharp' }}
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        config-file: .github/codeql/codeql-config.yml
        queries: security-and-quality


    # Setup .NET for C# analysis
    - name: Build KMPP C# code
      if: ${{ matrix.language == 'csharp' }}
      run: |
        if [ -d "tools/DotNetKMPP" ]; then
          cd tools/DotNetKMPP
          # Check if there's a project file (fix the check to look for any .csproj file)
          if compgen -G "*.csproj" > /dev/null; then
            echo "Found project file, building with existing project"
            dotnet build --configuration Release
          else
            echo "No project file found, creating a temporary project"
            # Create a temporary project file with force flag to overwrite if needed
            dotnet new classlib --output . --force
            # Add required packages
            dotnet add package Microsoft.Extensions.Logging --version 6.0.0
            dotnet add package Microsoft.Extensions.Logging.Abstractions --version 6.0.0
            dotnet add package Microsoft.Extensions.Logging.Console --version 6.0.0
            # Build the project
            dotnet build --configuration Release
          fi
        else
          echo "DotNetKMPP directory not found"
        fi

    # Custom build steps for C++ code
    - name: Build KMPP C/C++ code
      if: ${{ matrix.language == 'cpp' }}
      run: |
            ./scripts/create_certs.sh
            cmake -S . -B build -DKMPP_DEBUG=ON
            cmake --build build
            chmod +x scripts/postinst scripts/preinst
            sh scripts/preinst
            sudo make install -C build
            sudo sh scripts/postinst

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
